name: Build and Release

on:
  release:
    types: [ created ]

jobs:
  build:
    runs-on: macos-latest # Or macos-latest if your build requires it

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Specify your Node.js version

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    # Cache dependencies for faster builds (optional, but recommended)
    # Adjust paths and keys based on your project structure and package managers
    - name: Cache Node.js modules
      uses: actions/cache@v4
      with:
        path: ~/.npm # or node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Cache Rust dependencies (target directory)
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Node.js dependencies
      run: npm install # Or yarn install, or pnpm install

    # If your build.rs or other parts of the Rust build need system dependencies, install them here
    # For example:
    # - name: Install system dependencies (Linux)
    #   if: runner.os == 'Linux'
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Make build script executable
      run: chmod +x build-electron.sh

    - name: Run build script
      run: ./build-electron.sh

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/*.dmg
          # Assuming your build script outputs a .dmg file in 'dist' for macOS.
          # You might need to specify the exact file name or a different glob pattern (e.g., ./dist/*.zip).
        asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-macOS.dmg # Example: MyRepo-v1.0.0-macOS.dmg
        asset_content_type: application/x-apple-diskimage # Use application/zip if it's a zip file 
