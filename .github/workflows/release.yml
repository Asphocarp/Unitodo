name: Release Unitodo Tauri App

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0, v0.1.2, etc.

permissions:
  contents: write # Required to create releases and upload assets

jobs:
  publish-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
            # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
            targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install protobuf (macOS)
        if: matrix.platform == 'macos-latest'
        run: brew install protobuf

      # Install Linux-specific dependencies for Tauri
      # (libs for webview, system tray, etc.)
      - name: Install Linux dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            protobuf-compiler

      - name: Install protobuf (Windows)
        if: matrix.platform == 'windows-latest'
        run: choco install protoc --confirm --no-progress

      # Cache dependencies (optional, but recommended for faster builds)
      # Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # Path to npm cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache Rust dependencies (Cargo)
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cachekey based on current OS, Rust toolchain, and Cargo.lock files
          # Adjust if your src-tauri directory is elsewhere
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        # Adjust if you use yarn, pnpm, or if your package.json is not in the root
        # e.g., run: yarn install --frozen-lockfile
        # e.g., run: pnpm install --frozen-lockfile
        # If your frontend is in a subfolder like 'frontend/':
        # run: npm install
        # working-directory: ./frontend
        run: npm install

      - name: Build Tauri application and create release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Uncomment and set these secrets in your repository settings if you use Tauri's updater
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          # the action automatically replaces \_\_VERSION\_\_ with the app version.
          tagName: 'v__VERSION__'
          releaseName: 'Unitodo v__VERSION__' # Example: Unitodo v1.0.0
          # releaseBody: Optional body for the release notes.
          releaseBody: 'See the assets to download this version of Unitodo.'
          # releaseDraft: Create the release as a draft. Set to false to publish immediately.
          releaseDraft: true
          # prerelease: Mark as a prerelease if the tag contains a hyphen (e.g. v1.0.0-beta.1)
          prerelease: ${{ contains(github.ref_name, '-') }}
          # projectPath: Path to the Tauri project. Default is the root directory.
          # Adjust if your tauri.conf.json is not in './src-tauri/' relative to projectPath
          # configPath: ./src-tauri/tauri.conf.json

          # tauriScript: "npm run tauri" # Uncomment and adjust if needed

          # args: Additional arguments to pass to the tauri build command
          # For example, to build with a specific target: args: '--target universal-apple-darwin'
          args: ${{ matrix.args }}